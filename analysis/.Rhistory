rename(label = Sample)
relocate(id)
################################################################################
A_edges_extended <- A_edges %>%
left_join(A_nodes %>%
dplyr::select(Sample, from = id),
by = c("source" = "label")) %>%
left_join(A_nodes %>%
dplyr::select(Sample, to = id),
by = c("target" = "label"))
A_edges <- read_csv(here("data", "kelch_IBD_graph.csv")) %>%
rename(source = V1, target = V2, weight = Probability_of_edge)
A_nodes <- read_csv(here("data", "meta_data.csv")) %>%
mutate(id = row_number()) %>%
rename(label = Sample) %>%
relocate(id)
################################################################################
A_edges_extended <- A_edges %>%
left_join(A_nodes %>%
dplyr::select(Sample, from = id),
by = c("source" = "label")) %>%
left_join(A_nodes %>%
dplyr::select(Sample, to = id),
by = c("target" = "label"))
################################################################################
A_edges_extended <- A_edges %>%
left_join(A_nodes %>%
dplyr::select(label, from = id),
by = c("source" = "label")) %>%
left_join(A_nodes %>%
dplyr::select(label, to = id),
by = c("target" = "label"))
A_edges_extended
A_network <- network(A_edges_extended, vertex.attr = A_nodes, matrix.type = "edgelist", ignore.eval = FALSE)
################################################################################
A_edges_extended <- A_edges %>%
left_join(A_nodes %>%
dplyr::select(label, from = id),
by = c("source" = "label")) %>%
left_join(A_nodes %>%
dplyr::select(label, to = id),
by = c("target" = "label")) %>%
mutate(weight = weight > 0.99)
A_network <- network(A_edges_extended, vertex.attr = A_nodes, matrix.type = "edgelist", ignore.eval = FALSE)
A_edges_extended
################################################################################
A_edges_extended <- A_edges %>%
left_join(A_nodes %>%
dplyr::select(label, from = id),
by = c("source" = "label")) %>%
left_join(A_nodes %>%
dplyr::select(label, to = id),
by = c("target" = "label")) %>%
mutate(weight = as.numeric(weight > 0.99))
A_edges_extended
# A_network <- network(A_edges_extended, vertex.attr = A_nodes, matrix.type = "edgelist", ignore.eval = FALSE)
A_edges_extended
# A_network <- network(A_edges_extended, vertex.attr = A_nodes, matrix.type = "edgelist", ignore.eval = FALSE)
A_edges_extended %>%
dplyr::select(from, to, weight)
# A_network <- network(A_edges_extended, vertex.attr = A_nodes, matrix.type = "edgelist", ignore.eval = FALSE)
A_edges_extended %>%
dplyr::select(from, to, weight) %>%
pivot_wider(names_from = to, values_from = weight)
A_edges_extended
A_nodes <- read_csv(here("data", "meta_data.csv")) %>%
mutate(id = paste0("V", row_number())) %>%
rename(label = Sample) %>%
relocate(id)
A_nodes
################################################################################
A_edges_extended <- A_edges %>%
left_join(A_nodes %>%
dplyr::select(label, from = id),
by = c("source" = "label")) %>%
left_join(A_nodes %>%
dplyr::select(label, to = id),
by = c("target" = "label")) %>%
mutate(weight = as.numeric(weight > 0.99))
A_edges_extended
# A_network <- network(A_edges_extended, vertex.attr = A_nodes, matrix.type = "edgelist", ignore.eval = FALSE)
A_edges_extended %>%
dplyr::select(from, to, weight) %>%
pivot_wider(names_from = to, values_from = weight)
# A_network <- network(A_edges_extended, vertex.attr = A_nodes, matrix.type = "edgelist", ignore.eval = FALSE)
A_edges_extended %>%
dplyr::select(from, to, weight) %>%
pivot_wider(names_from = to, values_from = weight) %>%
column_to_rownames(var = "from")
A_edges_extended
# A_network <- network(A_edges_extended, vertex.attr = A_nodes, matrix.type = "edgelist", ignore.eval = FALSE)
test <- A_edges_extended %>%
dplyr::select(from, to, weight) %>%
pivot_wider(names_from = to, values_from = weight)
rownames(test) = A_edges_extended$from
rownames(test) = test$from
# A_network <- network(A_edges_extended, vertex.attr = A_nodes, matrix.type = "edgelist", ignore.eval = FALSE)
A_adj <- A_edges_extended %>%
dplyr::select(from, to, weight) %>%
pivot_wider(names_from = to, values_from = weight)
A_adj
A_edges_extended
A_nodes <- read_csv(here("data", "meta_data.csv")) %>%
mutate(id = row_number()) %>%
# mutate(id = paste0("V", row_number())) %>%
rename(label = Sample) %>%
relocate(id)
################################################################################
A_edges_extended <- A_edges %>%
left_join(A_nodes %>%
dplyr::select(label, from = id),
by = c("source" = "label")) %>%
left_join(A_nodes %>%
dplyr::select(label, to = id),
by = c("target" = "label")) %>%
mutate(weight = as.numeric(weight > 0.99))
A_edges_extended
A_network <- network(A_edges_extended, directed = FALSE)
install.packages("igraph")
# library(network)
library(igraph)
A_network <- graph_from_data_frame(d = A_edges_extended, vertices = A_nodes, directed = FALSE)
A_edges_extended
A_nodes
A_network <- graph_from_data_frame(d = A_edges_extended %>% dplyr::select(-c("source", "target")), vertices = A_nodes %>% dplyr::select(id), directed = FALSE)
A_edges_extended
edges <- A_edges
edges <- A_edges_extended
A_edges_extended
edges <- A_edges_extended %>%
dplyr::select(from, to, weight) %>%
mutate(weight = as.numeric(weight))
library(here)
library(readr)
library(tidyverse)
# library(network)
library(igraph)
rm(list = ls())
A_edges <- read_csv(here("data", "kelch_IBD_graph.csv")) %>%
rename(source = V1, target = V2, weight = Probability_of_edge)
A_nodes <- read_csv(here("data", "meta_data.csv")) %>%
mutate(id = row_number()) %>%
# mutate(id = paste0("V", row_number())) %>%
rename(label = Sample) %>%
relocate(id)
################################################################################
A_edges_extended <- A_edges %>%
left_join(A_nodes %>%
dplyr::select(label, from = id),
by = c("source" = "label")) %>%
left_join(A_nodes %>%
dplyr::select(label, to = id),
by = c("target" = "label")) %>%
mutate(weight = as.numeric(weight > 0.99))
A_network <- graph_from_data_frame(d = A_edges_extended %>% dplyr::select(-c("source", "target")), vertices = A_nodes %>% dplyr::select(id), directed = FALSE)
edges <- A_edges_extended %>%
dplyr::select(from, to, weight) %>%
mutate(weight = as.numeric(weight))
edges
edges <- A_edges_extended %>%
dplyr::select(from, to, weight) %>%
mutate(weight = as.integer(weight))
edges
A_nodes
nodes <- A_nodes %>%
dplyr::select(id, label)
A_network <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)
A_network <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)
A_network
gsize(A_network)
edges
edges <- A_edges_extended %>%
dplyr::select(from, to, weight) %>%
mutate(weight = as.integer(weight)) %>%
filter(weight > -)
edges <- A_edges_extended %>%
dplyr::select(from, to, weight) %>%
mutate(weight = as.integer(weight)) %>%
filter(weight > 0)
nodes <- A_nodes %>%
dplyr::select(id, label)
A_network <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)
A_network
gsize(A_network)
raw_edges <- read_csv(here("data", "kelch_IBD_graph.csv"))
raw_nodes <- read_csv(here("data", "meta_data.csv"))
rm(list = ls())
raw_edges <- read_csv(here("data", "kelch_IBD_graph.csv"))
raw_nodes <- read_csv(here("data", "meta_data.csv"))
A_nodes <- raw_nodes %>%
mutate(id = row_number()) %>%
# mutate(id = paste0("V", row_number())) %>%
rename(label = Sample) %>%
relocate(id)
################################################################################
A_nodes <- raw_nodes %>%
mutate(id = row_number()) %>%
# mutate(id = paste0("V", row_number())) %>%
rename(label = Sample) %>%
relocate(id)
A_edges <- raw_edges %>%
rename(source = V1, target = V2, weight = Probability_of_edge) %>%
left_join(A_nodes %>%
dplyr::select(label, from = id),
by = c("source" = "label")) %>%
left_join(A_nodes %>%
dplyr::select(label, to = id),
by = c("target" = "label")) %>%
mutate(weight = as.numeric(weight > 0.99))
edges <- A_edges %>%
dplyr::select(from, to, weight) %>%
mutate(weight = as.integer(weight)) %>%
filter(weight > 0)
nodes <- A_nodes %>%
dplyr::select(id, label)
A_network <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)
gsize(A_network)
components(A_network)
?components
components(A_network, mode = "weak")
clusters(A_network, mode = "weak")
edges <- A_edges %>%
dplyr::select(from, to, weight) %>%
mutate(weight = as.integer(weight)) %>%
filter(weight > 1-2^(-10))
nodes <- A_nodes %>%
dplyr::select(id, label)
A_network <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)
gsize(A_network)
components(A_network, mode = "weak")
1-2^(-10)
edges <- A_edges %>%
dplyr::select(from, to, weight) %>%
mutate(weight = as.integer(weight)) %>%
filter(weight >= 1-2^(-10))
nodes <- A_nodes %>%
dplyr::select(id, label)
A_network <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)
gsize(A_network)
components(A_network, mode = "weak")
edges <- A_edges %>%
dplyr::select(from, to, weight) %>%
mutate(weight = as.integer(weight)) %>%
filter(weight > 1-2^(-11))
nodes <- A_nodes %>%
dplyr::select(id, label)
A_network <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)
gsize(A_network)
components(A_network, mode = "weak")
1-2^(-11)
edges <- A_edges %>%
dplyr::select(from, to, weight) %>%
mutate(weight = as.integer(weight))
threshold = 0.99
edge_thresh <- edges %>%
mutate(weight = as.integer(weight > threshold)) %>%
filter(weight == 1)
edge_thresh
graph_thresh <- graph_from_data_frame(d = edge_thresh, vertices = nodes, directed = FALSE)
gsize(graph_thresh)
gsize(graph_thresh)
# gsize(graph_thresh)
graph_thresh_components <- components(A_network, mode = "weak")
graph_thresh_components
which.max(graph_thresh_components$csize)
which.max(graph_thresh_components$csize)
graph_LCC_ids <- which.max(graph_thresh_components$csize)
graph_LCC_id <- which.max(graph_thresh_components$csize)
get_LCC_size <- function(nodes, edges, threshold){
edge_thresh <- edges %>%
mutate(weight = as.integer(weight > threshold)) %>%
filter(weight == 1)
graph_thresh <- graph_from_data_frame(d = edge_thresh, vertices = nodes, directed = FALSE)
return(max(components(A_network, mode = "weak")$csize))
}
get_LCC_size(nodes, edges, threshold = 0.95)
get_LCC_size(nodes, edges, threshold = 0.9)
rm(list = ls())
raw_edges <- read_csv(here("data", "kelch_IBD_graph.csv"))
raw_nodes <- read_csv(here("data", "meta_data.csv"))
################################################################################
A_nodes <- raw_nodes %>%
mutate(id = row_number()) %>%
# mutate(id = paste0("V", row_number())) %>%
rename(label = Sample) %>%
relocate(id)
rm(list = ls())
raw_edges <- read_csv(here("data", "kelch_IBD_graph.csv"))
raw_nodes <- read_csv(here("data", "meta_data.csv"))
################################################################################
A_nodes <- raw_nodes %>%
mutate(id = row_number()) %>%
# mutate(id = paste0("V", row_number())) %>%
rename(label = Sample) %>%
relocate(id)
A_edges <- raw_edges %>%
rename(source = V1, target = V2, weight = Probability_of_edge) %>%
left_join(A_nodes %>%
dplyr::select(label, from = id),
by = c("source" = "label")) %>%
left_join(A_nodes %>%
dplyr::select(label, to = id),
by = c("target" = "label"))
edges <- A_edges %>%
dplyr::select(from, to, weight)
edges
nodes <- A_nodes %>%
dplyr::select(id, label)
get_LCC_size <- function(nodes, edges, threshold){
edge_thresh <- edges %>%
mutate(weight = as.integer(weight > threshold)) %>%
filter(weight == 1)
graph_thresh <- graph_from_data_frame(d = edge_thresh, vertices = nodes, directed = FALSE)
return(max(components(A_network, mode = "weak")$csize))
}
get_LCC_size(nodes, edges, threshold = 0.9)
get_LCC_size <- function(nodes, edges, threshold){
edge_thresh <- edges %>%
mutate(weight = as.integer(weight > threshold)) %>%
filter(weight == 1)
graph_thresh <- graph_from_data_frame(d = edge_thresh, vertices = nodes, directed = FALSE)
return(max(components(graph_thresh, mode = "weak")$csize))
}
get_LCC_size(nodes, edges, threshold = 0.9)
get_LCC_size(nodes, edges, threshold = 1-2^(-10))
1-2^(-seq(1:20))
purrr::map_int(1-2^(-seq(1:20)), ~get_LCC_size(nodes, edges, threshold = .x))
1-2^(-seq(1:20))
purrr::map_dbl(1-2^(-seq(1:20)), ~get_LCC_size(nodes, edges, threshold = .x))
lcc_sizes <- purrr::map_dbl(1-2^(-seq(1:20)), ~get_LCC_size(nodes, edges, threshold = .x))
plot(lcc_sizes)
lcc_sizes <- purrr::map_df(1-2^(-seq(1:20)), ~get_LCC_size(nodes, edges, threshold = .x))
lcc_sizes <- purrr::map_dbl(1-2^(-seq(1:20)), ~get_LCC_size(nodes, edges, threshold = .x))
tibble(x = lcc_sizes)
tibble(threshold = 1-2^(-seq(1:20)), lcc_sizes = lcc_sizes)
tibble(threshold = 1-2^(-seq(1:20)), power = seq(1:20), lcc_sizes = lcc_sizes)
lcc_sizes_df <- tibble(threshold = 1-2^(-seq(1:20)), power = seq(1:20), lcc_sizes = lcc_sizes)
lcc_sizes_df
ggplot(lcc_sizes_df) +
geom_line(aes(x = power, y = lcc_sizes))
ggplot(lcc_sizes_df) +
geom_line(aes(x = power, y = lcc_sizes)) +
labs(x = "Threshold (1-2^(-x))", y = "LCC Size", title = "Thresholding the Edge Weights") +
theme_light()
ggplot(lcc_sizes_df) +
geom_line(aes(x = power, y = lcc_sizes)) +
labs(x = "Threshold (1 - 2^(-x))", y = "LCC Size", title = "Thresholding the Edge Weights") +
theme_light()
edges
################################################################################
edges_select <- edges %>%
mutate(weight = as.integer(weight > 1-2^(-10))) %>%
filter(weight == 1)
edges_select
graph_select <- graph_from_data_frame(d = edges_select, vertices = nodes, directed = FALSE)
graph_select
ggsave(p, filename = here("fig", "threshold.pdf"), width = 4, height = 3, dpi = "retina")
p <- ggplot(lcc_sizes_df) +
geom_line(aes(x = power, y = lcc_sizes)) +
labs(x = "Threshold (1 - 2^(-x))", y = "LCC Size", title = "Thresholding the Edge Weights") +
theme_light()
ggsave(p, filename = here("fig", "threshold.pdf"), width = 4, height = 3, dpi = "retina")
ggsave(p, filename = here("fig", "threshold.pdf"), width = 6, height = 3, dpi = "retina")
graph_select
gisze(graph_select)
gsize(graph_select)
gorder(graph_select)
graph_select_comps <- components(graph_thresh, mode = "weak")
graph_select_comps <- components(graph_select, mode = "weak")
graph_select_comps
max_lcc <- which.max(graph_select_comps$csize)
max_lcc
V(graph_select)
V(graph_select)[graph_select_comps$membership == max_lcc]
lcc_ids <- V(graph_select)[graph_select_comps$membership == max_lcc]
# subgraph
igraph::induced_subgraph(graph_select, lcc_ids)
# subgraph
graph_select_lcc <- igraph::induced_subgraph(graph_select, lcc_ids)
graph_select_lcc
as_adjacency_matrix(graph_select_lcc, type = "upper")
as.matrix(as_adjacency_matrix(graph_select_lcc, type = "upper"))
A_lcc <- as.matrix(as_adjacency_matrix(graph_select_lcc, type = "upper"))
gsize(graph_select_lcc)
gorder(graph_select_lcc)
A_lcc <- as.matrix(as_adjacency_matrix(graph_select_lcc, type = "upper"))
A_lcc
dim(A_lcc)
A_lcc <- as.matrix(as_adjacency_matrix(graph_select_lcc, type = "both"))
A_lcc
A_lcc <- as_adjacency_matrix(graph_select_lcc, type = "both", sparse = FALSE)
A_lcc
options(mc.cores = parallel::detectCores())
parallel::detectCores()
options(mc.cores = parallel::detectCores()-1)
################################################################################
################################################################################
################################################################################
library("rstan") # observe startup messages
options(mc.cores = parallel::detectCores()-1)
rstan_options(auto_write = TRUE)
lcc_dat <- list(A = A_lcc,
n = nrow(A_lcc))
lcc_dat
lcc_dat <- list(A = A_lcc,
n = nrow(A_lcc),
K = 30)
saveRDS(A_lcc, file = here("data", "A_lcc.rds"))
library(here)
library("rstan") # observe startup messages
options(mc.cores = parallel::detectCores()-1)
rstan_options(auto_write = TRUE)
A_lcc <- readRDS(here("data", "A_lcc.rds"))
A_lcc
lcc_dat <- list(A = A_lcc,
n = nrow(A_lcc),
K = 30)
lcc_dat
n = 4
n = 4
for(i in 1:n){
for(j in (2:n)){
if(j <= i){
next
} else{
print((i-1)*(n-i+1))
}
}
}
print((i-1)*(n-i+1) + j)
n = 4
for(i in 1:n){
for(j in (2:n)){
if(j <= i){
next
} else{
print((i-1)*(n-i+1) + j)
}
}
}
print((i-1)*(n-i+1) + j - 1)
n = 4
for(i in 1:n){
for(j in (2:n)){
if(j <= i){
next
} else{
print((i-1)*(n-i+1) + j - 1)
}
}
}
n = 4
for(i in 1:n){
for(j in (2:n)){
if(j <= i){
next
} else{
print((i-1)*(n-i+1))
}
}
}
n = 4
for(i in 1:n){
for(j in (2:n)){
if(j <= i){
next
} else{
print((n-i+1))
}
}
}
for(i in 1:n){
for(j in (2:n)){
if(j <= i){
next
} else{
print((n-i-1))
}
}
}
for(i in 1:n){
for(j in ((i+1):n)){
print((i-1+j))
}
}
for(i in 1:n){
for(j in ((i+1):n)){
print((i-1+j-1))
}
}
rm(list = ls())
library(here)
library("rstan") # observe startup messages
options(mc.cores = parallel::detectCores()-1)
rstan_options(auto_write = TRUE)
A_lcc <- readRDS(here("data", "A_lcc.rds"))
lcc_dat <- list(A = A_lcc,
n = nrow(A_lcc),
K = 30)
fit <- stan(file = 'lcc_stan.stan', data = lcc_dat)
fit <- stan(file = 'lcc_stan.stan', data = lcc_dat)
fit <- stan(file = 'lcc_stan.stan', data = lcc_dat)
fit <- stan(file = 'lcc_stan.stan', data = lcc_dat)
fit <- stan(file = 'lcc_stan.stan', data = lcc_dat)
fit <- stan(file = 'lcc_stan.stan', data = lcc_dat)
fit <- stan(file = 'lcc_stan.stan', data = lcc_dat)
install.packages("rjags")
install.packages("coda")
library(here)
library(rjags)
library(coda)
library(rjags)
