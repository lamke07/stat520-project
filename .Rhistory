devtools::install_github("IRkernel/IRkernel")
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
IRkernel::installspec()
IRkernel::installspec()
install.packages("tidyverse")
devtools::install_github("giannamonti/RobZS")
install.packages("zeroSum")
install.packages("https://github.com/rehbergT/zeroSum/raw/master/zeroSum_2.0.4.tar.gz", repos = NULL)
devtools::install_github("rehbergT/zeroSum/zeroSum")
install.packages("https://github.com/rehbergT/zeroSum/raw/master/zeroSum_2.0.3.tar.gz", repos = NULL)
install.packages("https://github.com/rehbergT/zeroSum/raw/master/zeroSum_2.0.4.tar.gz", repos = NULL)
?devtools::install_github
devtools::install_github("rehbergT/zeroSum/zeroSum", ref = "v2.0.3")
devtools::install_github("rehbergT/zeroSum/zeroSum")
library(tidyverse)
library(here)
`hw-marks` <- readRDS("~/GitHub/stat550/missing-grades/hw-marks.rds")
hw-marks
hw <- readRDS("~/GitHub/stat550/missing-grades/hw-marks.rds")
hw
hw %>% print(n = 5)
head(hw)
library(here)
library(rjags)
install.packages("rjags")
library(rjags)
library(here)
library(readr)
library(tidyverse)
detach("package:here", unload = TRUE)
library(here)
detach("package:here", unload = TRUE)
setwd("~/GitHub/stat520-project")
library(here)
library(here)
library(readr)
library(tidyverse)
# library(network)
library(igraph)
rm(list = ls())
raw_edges <- read_csv(here("data", "kelch_IBD_graph.csv"))
raw_nodes <- read_csv(here("data", "meta_data.csv"))
################################################################################
A_nodes <- raw_nodes %>%
mutate(id = row_number()) %>%
# mutate(id = paste0("V", row_number())) %>%
rename(label = Sample) %>%
relocate(id)
A_edges <- raw_edges %>%
rename(source = V1, target = V2, weight = Probability_of_edge) %>%
left_join(A_nodes %>%
dplyr::select(label, from = id),
by = c("source" = "label")) %>%
left_join(A_nodes %>%
dplyr::select(label, to = id),
by = c("target" = "label"))
edges <- A_edges %>%
dplyr::select(from, to, weight)
nodes <- A_nodes %>%
dplyr::select(id, label)
get_LCC_size <- function(nodes, edges, threshold){
edge_thresh <- edges %>%
mutate(weight = as.integer(weight > threshold)) %>%
filter(weight == 1)
graph_thresh <- graph_from_data_frame(d = edge_thresh, vertices = nodes, directed = FALSE)
return(max(components(graph_thresh, mode = "weak")$csize))
}
lcc_sizes <- purrr::map_dbl(1-2^(-seq(1:20)), ~get_LCC_size(nodes, edges, threshold = .x))
lcc_sizes_df <- tibble(threshold = 1-2^(-seq(1:20)), power = seq(1:20), lcc_sizes = lcc_sizes)
p <- ggplot(lcc_sizes_df) +
geom_line(aes(x = power, y = lcc_sizes)) +
labs(x = "Threshold (1 - 2^(-x))", y = "LCC Size", title = "Thresholding the Edge Weights") +
theme_light()
ggsave(p, filename = here("fig", "threshold.pdf"), width = 6, height = 3, dpi = "retina")
################################################################################
edges_select <- edges %>%
mutate(weight = as.integer(weight > 1-2^(-16))) %>%
filter(weight == 1)
graph_select <- graph_from_data_frame(d = edges_select, vertices = nodes, directed = FALSE)
gsize(graph_select)
V(graph_select)
graph_select <- graph_from_data_frame(d = edges_select, vertices = nodes, directed = FALSE)
graph_select_comps <- components(graph_select, mode = "weak")
max_lcc <- which.max(graph_select_comps$csize)
V(graph_select)
lcc_ids <- V(graph_select)[graph_select_comps$membership == max_lcc]
lcc_ids
# subgraph
graph_select_lcc <- igraph::induced_subgraph(graph_select, lcc_ids)
gsize(graph_select)
gorder(graph_select)
gsize(graph_select_lcc)
gorder(graph_select_lcc)
?as_adjacency_matrix
A_lcc <- as_adjacency_matrix(graph_select_lcc, type = "upper", sparse = FALSE)
A_lcc
saveRDS(A_lcc, file = here("data", "A_lcc_16.rds"))
